#ifndef __VS_FONT_H__
#define __VS_FONT_H__

#include "..\System\String.h"
#include "..\System\System.h"
#include "..\System\List.h"
#include "..\Math\Vector.h"

/* 
=====================================
	vsFont2
=====================================
*/
struct vsFont2 
{
	EMPTY_TRUCTORS( vsFont2 );
	MINIMUM_OPERATORS( vsFont2 );
	char*		name;
	float		size;
	uint		charMap;
	uint		listBase;
};


class vsPrinter2 {
public:
	vsPrinter2( void );
	~vsPrinter2( void );

	void			SetPrintLayer( float zCoord );
	int				NewFont( char* szFontName, uint texture, float fSize );
	void			Print( uint id, float x, float y, const vsVec4f& color, char* text, ... );
	int				GetFontId( char* szName );

private:
	vsList<vsFont2*>fonts;
	float			zCoord;
	uint			printBuffer;
	bool			neverEverRendered;
};

const float vsLib2_fontTextureScale = 1.0f / 16.0f;
const vsVec2f vsLib2_fontTextureCoords[256] = {
	vsVec2f( 0.0000, 0.0000 ),
	vsVec2f( 0.0625, 0.0000 ),
	vsVec2f( 0.1250, 0.0000 ),
	vsVec2f( 0.1875, 0.0000 ),
	vsVec2f( 0.2500, 0.0000 ),
	vsVec2f( 0.3125, 0.0000 ),
	vsVec2f( 0.3750, 0.0000 ),
	vsVec2f( 0.4375, 0.0000 ),
	vsVec2f( 0.5000, 0.0000 ),
	vsVec2f( 0.5625, 0.0000 ),
	vsVec2f( 0.6250, 0.0000 ),
	vsVec2f( 0.6875, 0.0000 ),
	vsVec2f( 0.7500, 0.0000 ),
	vsVec2f( 0.8125, 0.0000 ),
	vsVec2f( 0.8750, 0.0000 ),
	vsVec2f( 0.9375, 0.0000 ),
	vsVec2f( 0.0000, 0.0625 ),
	vsVec2f( 0.0625, 0.0625 ),
	vsVec2f( 0.1250, 0.0625 ),
	vsVec2f( 0.1875, 0.0625 ),
	vsVec2f( 0.2500, 0.0625 ),
	vsVec2f( 0.3125, 0.0625 ),
	vsVec2f( 0.3750, 0.0625 ),
	vsVec2f( 0.4375, 0.0625 ),
	vsVec2f( 0.5000, 0.0625 ),
	vsVec2f( 0.5625, 0.0625 ),
	vsVec2f( 0.6250, 0.0625 ),
	vsVec2f( 0.6875, 0.0625 ),
	vsVec2f( 0.7500, 0.0625 ),
	vsVec2f( 0.8125, 0.0625 ),
	vsVec2f( 0.8750, 0.0625 ),
	vsVec2f( 0.9375, 0.0625 ),
	vsVec2f( 0.0000, 0.1250 ),
	vsVec2f( 0.0625, 0.1250 ),
	vsVec2f( 0.1250, 0.1250 ),
	vsVec2f( 0.1875, 0.1250 ),
	vsVec2f( 0.2500, 0.1250 ),
	vsVec2f( 0.3125, 0.1250 ),
	vsVec2f( 0.3750, 0.1250 ),
	vsVec2f( 0.4375, 0.1250 ),
	vsVec2f( 0.5000, 0.1250 ),
	vsVec2f( 0.5625, 0.1250 ),
	vsVec2f( 0.6250, 0.1250 ),
	vsVec2f( 0.6875, 0.1250 ),
	vsVec2f( 0.7500, 0.1250 ),
	vsVec2f( 0.8125, 0.1250 ),
	vsVec2f( 0.8750, 0.1250 ),
	vsVec2f( 0.9375, 0.1250 ),
	vsVec2f( 0.0000, 0.1875 ),
	vsVec2f( 0.0625, 0.1875 ),
	vsVec2f( 0.1250, 0.1875 ),
	vsVec2f( 0.1875, 0.1875 ),
	vsVec2f( 0.2500, 0.1875 ),
	vsVec2f( 0.3125, 0.1875 ),
	vsVec2f( 0.3750, 0.1875 ),
	vsVec2f( 0.4375, 0.1875 ),
	vsVec2f( 0.5000, 0.1875 ),
	vsVec2f( 0.5625, 0.1875 ),
	vsVec2f( 0.6250, 0.1875 ),
	vsVec2f( 0.6875, 0.1875 ),
	vsVec2f( 0.7500, 0.1875 ),
	vsVec2f( 0.8125, 0.1875 ),
	vsVec2f( 0.8750, 0.1875 ),
	vsVec2f( 0.9375, 0.1875 ),
	vsVec2f( 0.0000, 0.2500 ),
	vsVec2f( 0.0625, 0.2500 ),
	vsVec2f( 0.1250, 0.2500 ),
	vsVec2f( 0.1875, 0.2500 ),
	vsVec2f( 0.2500, 0.2500 ),
	vsVec2f( 0.3125, 0.2500 ),
	vsVec2f( 0.3750, 0.2500 ),
	vsVec2f( 0.4375, 0.2500 ),
	vsVec2f( 0.5000, 0.2500 ),
	vsVec2f( 0.5625, 0.2500 ),
	vsVec2f( 0.6250, 0.2500 ),
	vsVec2f( 0.6875, 0.2500 ),
	vsVec2f( 0.7500, 0.2500 ),
	vsVec2f( 0.8125, 0.2500 ),
	vsVec2f( 0.8750, 0.2500 ),
	vsVec2f( 0.9375, 0.2500 ),
	vsVec2f( 0.0000, 0.3125 ),
	vsVec2f( 0.0625, 0.3125 ),
	vsVec2f( 0.1250, 0.3125 ),
	vsVec2f( 0.1875, 0.3125 ),
	vsVec2f( 0.2500, 0.3125 ),
	vsVec2f( 0.3125, 0.3125 ),
	vsVec2f( 0.3750, 0.3125 ),
	vsVec2f( 0.4375, 0.3125 ),
	vsVec2f( 0.5000, 0.3125 ),
	vsVec2f( 0.5625, 0.3125 ),
	vsVec2f( 0.6250, 0.3125 ),
	vsVec2f( 0.6875, 0.3125 ),
	vsVec2f( 0.7500, 0.3125 ),
	vsVec2f( 0.8125, 0.3125 ),
	vsVec2f( 0.8750, 0.3125 ),
	vsVec2f( 0.9375, 0.3125 ),
	vsVec2f( 0.0000, 0.3750 ),
	vsVec2f( 0.0625, 0.3750 ),
	vsVec2f( 0.1250, 0.3750 ),
	vsVec2f( 0.1875, 0.3750 ),
	vsVec2f( 0.2500, 0.3750 ),
	vsVec2f( 0.3125, 0.3750 ),
	vsVec2f( 0.3750, 0.3750 ),
	vsVec2f( 0.4375, 0.3750 ),
	vsVec2f( 0.5000, 0.3750 ),
	vsVec2f( 0.5625, 0.3750 ),
	vsVec2f( 0.6250, 0.3750 ),
	vsVec2f( 0.6875, 0.3750 ),
	vsVec2f( 0.7500, 0.3750 ),
	vsVec2f( 0.8125, 0.3750 ),
	vsVec2f( 0.8750, 0.3750 ),
	vsVec2f( 0.9375, 0.3750 ),
	vsVec2f( 0.0000, 0.4375 ),
	vsVec2f( 0.0625, 0.4375 ),
	vsVec2f( 0.1250, 0.4375 ),
	vsVec2f( 0.1875, 0.4375 ),
	vsVec2f( 0.2500, 0.4375 ),
	vsVec2f( 0.3125, 0.4375 ),
	vsVec2f( 0.3750, 0.4375 ),
	vsVec2f( 0.4375, 0.4375 ),
	vsVec2f( 0.5000, 0.4375 ),
	vsVec2f( 0.5625, 0.4375 ),
	vsVec2f( 0.6250, 0.4375 ),
	vsVec2f( 0.6875, 0.4375 ),
	vsVec2f( 0.7500, 0.4375 ),
	vsVec2f( 0.8125, 0.4375 ),
	vsVec2f( 0.8750, 0.4375 ),
	vsVec2f( 0.9375, 0.4375 ),
	vsVec2f( 0.0000, 0.5000 ),
	vsVec2f( 0.0625, 0.5000 ),
	vsVec2f( 0.1250, 0.5000 ),
	vsVec2f( 0.1875, 0.5000 ),
	vsVec2f( 0.2500, 0.5000 ),
	vsVec2f( 0.3125, 0.5000 ),
	vsVec2f( 0.3750, 0.5000 ),
	vsVec2f( 0.4375, 0.5000 ),
	vsVec2f( 0.5000, 0.5000 ),
	vsVec2f( 0.5625, 0.5000 ),
	vsVec2f( 0.6250, 0.5000 ),
	vsVec2f( 0.6875, 0.5000 ),
	vsVec2f( 0.7500, 0.5000 ),
	vsVec2f( 0.8125, 0.5000 ),
	vsVec2f( 0.8750, 0.5000 ),
	vsVec2f( 0.9375, 0.5000 ),
	vsVec2f( 0.0000, 0.5625 ),
	vsVec2f( 0.0625, 0.5625 ),
	vsVec2f( 0.1250, 0.5625 ),
	vsVec2f( 0.1875, 0.5625 ),
	vsVec2f( 0.2500, 0.5625 ),
	vsVec2f( 0.3125, 0.5625 ),
	vsVec2f( 0.3750, 0.5625 ),
	vsVec2f( 0.4375, 0.5625 ),
	vsVec2f( 0.5000, 0.5625 ),
	vsVec2f( 0.5625, 0.5625 ),
	vsVec2f( 0.6250, 0.5625 ),
	vsVec2f( 0.6875, 0.5625 ),
	vsVec2f( 0.7500, 0.5625 ),
	vsVec2f( 0.8125, 0.5625 ),
	vsVec2f( 0.8750, 0.5625 ),
	vsVec2f( 0.9375, 0.5625 ),
	vsVec2f( 0.0000, 0.6250 ),
	vsVec2f( 0.0625, 0.6250 ),
	vsVec2f( 0.1250, 0.6250 ),
	vsVec2f( 0.1875, 0.6250 ),
	vsVec2f( 0.2500, 0.6250 ),
	vsVec2f( 0.3125, 0.6250 ),
	vsVec2f( 0.3750, 0.6250 ),
	vsVec2f( 0.4375, 0.6250 ),
	vsVec2f( 0.5000, 0.6250 ),
	vsVec2f( 0.5625, 0.6250 ),
	vsVec2f( 0.6250, 0.6250 ),
	vsVec2f( 0.6875, 0.6250 ),
	vsVec2f( 0.7500, 0.6250 ),
	vsVec2f( 0.8125, 0.6250 ),
	vsVec2f( 0.8750, 0.6250 ),
	vsVec2f( 0.9375, 0.6250 ),
	vsVec2f( 0.0000, 0.6875 ),
	vsVec2f( 0.0625, 0.6875 ),
	vsVec2f( 0.1250, 0.6875 ),
	vsVec2f( 0.1875, 0.6875 ),
	vsVec2f( 0.2500, 0.6875 ),
	vsVec2f( 0.3125, 0.6875 ),
	vsVec2f( 0.3750, 0.6875 ),
	vsVec2f( 0.4375, 0.6875 ),
	vsVec2f( 0.5000, 0.6875 ),
	vsVec2f( 0.5625, 0.6875 ),
	vsVec2f( 0.6250, 0.6875 ),
	vsVec2f( 0.6875, 0.6875 ),
	vsVec2f( 0.7500, 0.6875 ),
	vsVec2f( 0.8125, 0.6875 ),
	vsVec2f( 0.8750, 0.6875 ),
	vsVec2f( 0.9375, 0.6875 ),
	vsVec2f( 0.0000, 0.7500 ),
	vsVec2f( 0.0625, 0.7500 ),
	vsVec2f( 0.1250, 0.7500 ),
	vsVec2f( 0.1875, 0.7500 ),
	vsVec2f( 0.2500, 0.7500 ),
	vsVec2f( 0.3125, 0.7500 ),
	vsVec2f( 0.3750, 0.7500 ),
	vsVec2f( 0.4375, 0.7500 ),
	vsVec2f( 0.5000, 0.7500 ),
	vsVec2f( 0.5625, 0.7500 ),
	vsVec2f( 0.6250, 0.7500 ),
	vsVec2f( 0.6875, 0.7500 ),
	vsVec2f( 0.7500, 0.7500 ),
	vsVec2f( 0.8125, 0.7500 ),
	vsVec2f( 0.8750, 0.7500 ),
	vsVec2f( 0.9375, 0.7500 ),
	vsVec2f( 0.0000, 0.8125 ),
	vsVec2f( 0.0625, 0.8125 ),
	vsVec2f( 0.1250, 0.8125 ),
	vsVec2f( 0.1875, 0.8125 ),
	vsVec2f( 0.2500, 0.8125 ),
	vsVec2f( 0.3125, 0.8125 ),
	vsVec2f( 0.3750, 0.8125 ),
	vsVec2f( 0.4375, 0.8125 ),
	vsVec2f( 0.5000, 0.8125 ),
	vsVec2f( 0.5625, 0.8125 ),
	vsVec2f( 0.6250, 0.8125 ),
	vsVec2f( 0.6875, 0.8125 ),
	vsVec2f( 0.7500, 0.8125 ),
	vsVec2f( 0.8125, 0.8125 ),
	vsVec2f( 0.8750, 0.8125 ),
	vsVec2f( 0.9375, 0.8125 ),
	vsVec2f( 0.0000, 0.8750 ),
	vsVec2f( 0.0625, 0.8750 ),
	vsVec2f( 0.1250, 0.8750 ),
	vsVec2f( 0.1875, 0.8750 ),
	vsVec2f( 0.2500, 0.8750 ),
	vsVec2f( 0.3125, 0.8750 ),
	vsVec2f( 0.3750, 0.8750 ),
	vsVec2f( 0.4375, 0.8750 ),
	vsVec2f( 0.5000, 0.8750 ),
	vsVec2f( 0.5625, 0.8750 ),
	vsVec2f( 0.6250, 0.8750 ),
	vsVec2f( 0.6875, 0.8750 ),
	vsVec2f( 0.7500, 0.8750 ),
	vsVec2f( 0.8125, 0.8750 ),
	vsVec2f( 0.8750, 0.8750 ),
	vsVec2f( 0.9375, 0.8750 ),
	vsVec2f( 0.0000, 0.9375 ),
	vsVec2f( 0.0625, 0.9375 ),
	vsVec2f( 0.1250, 0.9375 ),
	vsVec2f( 0.1875, 0.9375 ),
	vsVec2f( 0.2500, 0.9375 ),
	vsVec2f( 0.3125, 0.9375 ),
	vsVec2f( 0.3750, 0.9375 ),
	vsVec2f( 0.4375, 0.9375 ),
	vsVec2f( 0.5000, 0.9375 ),
	vsVec2f( 0.5625, 0.9375 ),
	vsVec2f( 0.6250, 0.9375 ),
	vsVec2f( 0.6875, 0.9375 ),
	vsVec2f( 0.7500, 0.9375 ),
	vsVec2f( 0.8125, 0.9375 ),
	vsVec2f( 0.8750, 0.9375 ),
	vsVec2f( 0.9375, 0.9375 )
};



#endif