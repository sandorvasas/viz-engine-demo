@FRAGMENT_SHADER
uniform sampler2D	in_MegaTextureDiffuse;
uniform sampler2D	in_MegaTextureNormal;
uniform float		in_Time;
uniform float		in_ValWater;

varying vec3		var_LightDirection;
varying vec3		var_ViewDirection;
varying vec3		var_Normal;
varying vec3		var_ssTangent;
varying vec2		var_MegaTexCoords;
varying float		var_Value;
varying float		var_CellLife;

const float numTexturesPerRow = 16.0;
const float textureSize		  = 1.0 / numTexturesPerRow;

vec4 TriPlanarBlend( sampler2D sample, vec2 megaTexUV )
{
	vec4 map1 = texture2D( sample, ( megaTexUV + gl_TexCoord[ 0 ].xy ) * textureSize );

	if ( var_CellLife < 1.0 ) {
		float s = float( int( ( 1.0 - var_CellLife ) * 10.0 ) );
		vec4 map2 = texture2D( sample, ( vec2( s, 15.0 ) + gl_TexCoord[ 0 ].xy ) * textureSize );
		map1.xyz = map1.xyz + ( map2.xyz - 0.56078 ) * 0.84;
	}

	return map1;
}


void main()
{
	//===============================
	//	fog calculations
	//===============================	
	vec4  fogColor	= vec4( 0.8, 0.8, 0.8, 1.0 );//vec4( 0.529411765, 0.807843137, 0.980392157, 1.0 );
	float dist		= length( var_ViewDirection );
	float fogFactor = clamp( ( dist-5.0 )/15.0, 0.0, 1.0 );


	//===============================
	//	lighting calculations	
	//===============================
	vec3 N = normalize( var_Normal );
	vec3 L = normalize( var_LightDirection );
	vec3 E = normalize( var_ViewDirection );
	vec3 H = normalize( L+E );

	
	vec4 diffuseMap, normalMap;

	/*	normalMap  = TriPlanarBlend( in_MegaTextureNormal, var_MegaTexCoords );
		
		float height = ( normalMap.w ) * 0.08 - 0.04;
		vec3 TexOffset1 = -E * height * textureSize; 	
	*/

	diffuseMap = TriPlanarBlend( in_MegaTextureDiffuse, var_MegaTexCoords );
	normalMap  = TriPlanarBlend( in_MegaTextureNormal, var_MegaTexCoords );

	

	N = normalize( normalMap.xyz * 4.0 - 2.0 );
	float l_diff = clamp( dot( N, L ), 0.0, 0.7 ) * 1.0;
	float l_spec = clamp( dot( N, H ), 0.0, 0.96 );

	float ambient = 0.7;

	vec3 color3 = diffuseMap.xyz * ( l_diff*0.0 + ambient );// + pow( l_spec, 50.0 );


	vec4 color4 = vec4( color3, diffuseMap.w );
	vec4 finalColor =  mix( color4, fogColor, fogFactor );

	gl_FragData[0] = finalColor;
	//gl_FragData[1] = vec4( normalize( var_ssTangent ), 1.0 );
	
	vec3 SST = normalize( var_ssTangent );
	gl_FragData[1] = vec4( N, 1.0 );
}













@VERTEX_SHADER
uniform float	in_Time;
uniform vec3	in_ViewPosition;
uniform vec3	in_LightPosition;
uniform float	in_ValWater;

attribute vec3	in_Position;
attribute vec3	in_Normal;
attribute float in_CellLife;
attribute vec2	in_MegaTexCoords;
attribute vec2	in_GhostTexCoords;
attribute float in_Value;

varying vec3	var_LightDirection;
varying vec3	var_ViewDirection;
varying vec3	var_Normal;
varying vec2	var_MegaTexCoords;
varying float	var_Value;
varying float	var_CellLife;

void main()
{
	vec3 position = in_Position;

	if ( in_Value == in_ValWater ) {
		position.y += in_Value; //sin( in_Position.x*0.2 + in_Time ) * cos( in_Position.z*0.2 + in_Time );
	}
	gl_Position = gl_ModelViewProjectionMatrix * vec4( position, 1.0 );

	vec3 T;
	if ( in_Normal.x != 0.0 )
		T = vec3( -in_Normal.y, in_Normal.x, in_Normal.z );
	else
	if ( in_Normal.y != 0.0 )
		T = vec3( in_Normal.x, in_Normal.y, -in_Normal.x );
	else
	if ( in_Normal.z != 0.0 )
		T = vec3( -in_Normal.z, in_Normal.y, in_Normal.x );
	T = normalize( T );

	vec3 N = normalize( in_Normal );
	vec3 B = normalize( cross( T, N ) );
	mat3 TBN = mat3( T, B, N );

	var_Normal			= in_Normal;
	var_LightDirection	= ( in_LightPosition - position ) * TBN;
	var_ViewDirection	= ( in_ViewPosition - position );
	var_Value			= in_Value;
	var_MegaTexCoords	= in_MegaTexCoords;

	var_CellLife = in_CellLife;

	gl_TexCoord[0].xy = in_GhostTexCoords;
}